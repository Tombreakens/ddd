// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Staking {
    mapping(address => uint256) public balances;
    mapping(address => uint256) public rewardsRate;
    mapping(address => uint256) public lastUpdateTime;
    mapping(address => uint256) public rewardsEarned;

    uint256 public totalStaked;
    uint256 public rewardPerSecond;

    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);
    event RewardPaid(address indexed user, uint256 reward);

    constructor(uint256 _rewardPerSecond) {
        rewardPerSecond = _rewardPerSecond;
    }

    function stake(uint256 amount) external {
        updateRewards(msg.sender);
        require(amount > 0, "Amount must be greater than 0");
        require(totalStaked + amount >= totalStaked, "Integer overflow");
        totalStaked += amount;
        balances[msg.sender] += amount;
        lastUpdateTime[msg.sender] = block.timestamp;
        emit Staked(msg.sender, amount);
    }

    function withdraw(uint256 amount) external {
        updateRewards(msg.sender);
        require(amount > 0, "Amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        totalStaked -= amount;
        balances[msg.sender] -= amount;
        lastUpdateTime[msg.sender] = block.timestamp;
        payable(msg.sender).transfer(amount);
        emit Withdrawn(msg.sender, amount);
    }

    function getReward() external {
        updateRewards(msg.sender);
        uint256 reward = rewardsEarned[msg.sender];
        rewardsEarned[msg.sender] = 0;
        payable(msg.sender).transfer(reward);
        emit RewardPaid(msg.sender, reward);
    }

    function updateRewards(address account) internal {
        rewardsEarned[account] += (balances[account] * (block.timestamp - lastUpdateTime[account]) * rewardPerSecond) / 1 ether;
        lastUpdateTime[account] = block.timestamp;
    }
}
